import pandas as pd
import numpy as np
 
 
def callapi(user_input):
# Create a dataframe with 100 records
    df = pd.DataFrame({
        'ID': range(1, 101),
        'Name': [f'Name{i}' for i in range(1, 101)],
        'Value': np.random.randint(1, 100, 100)
    })
   
    print(df)
    # return df
    return df.to_dict(orient="records")
 
 
user_input='Show the counts of records from all the tables'
callapi(user_input)
 
# import pandas as pd
# from sqlalchemy import create_engine
 
# engine = create_engine('sqlite:///:memory:')
# df = pd.DataFrame({'A': [1, 2, 3], 'B': ['x', 'y', 'z']})
# df.to_sql('my_table', engine, index=False)
 
# def callapi(user_input):
 
#     # query = "SELECT * FROM my_table WHERE A > 1"
#     query = "WITH __prov AS ( SELECT mstr_prov_id, prov_ctgry_cd FROM doc_ai_db.doc_ai_schema.prov ), __sps_safety_net_ind_001 AS ( SELECT prov_id_s FROM doc_ai_db.doc_ai_schema.sps_safety_net_ind_001 ), __sps_safety_net_ind_002 AS ( SELECT prov_id_s FROM doc_ai_db.doc_ai_schema.sps_safety_net_ind_002 ), __sps_safety_net_ind_003 AS ( SELECT prov_id_s FROM doc_ai_db.doc_ai_schema.sps_safety_net_ind_003 ), __sps_safety_net_org_001 AS ( SELECT prov_id_s FROM doc_ai_db.doc_ai_schema.sps_safety_net_org_001 ), __sps_safety_net_org_002 AS ( SELECT prov_id_s FROM doc_ai_db.doc_ai_schema.sps_safety_net_org_002 ), __sps_safety_net_org_003 AS ( SELECT prov_id_s FROM doc_ai_db.doc_ai_schema.sps_safety_net_org_003 ), __sps_safety_net_org_008 AS ( SELECT prov_id_s FROM doc_ai_db.doc_ai_schema.sps_safety_net_org_008 ), __sps_safety_net_org_009 AS ( SELECT prov_id_s FROM doc_ai_db.doc_ai_schema.sps_safety_net_org_009 ), __sps_safety_net_org_010 AS ( SELECT prov_id_s FROM doc_ai_db.doc_ai_schema.sps_safety_net_org_010 ), __sps_safety_net_org_019 AS ( SELECT prov_id_s FROM doc_ai_db.doc_ai_schema.sps_safety_net_org_019 ), provider_counts AS ( SELECT COUNT(DISTINCT CASE WHEN prov_ctgry_cd = '181' THEN mstr_prov_id END) AS individual_count, COUNT(DISTINCT CASE WHEN prov_ctgry_cd = '182' THEN mstr_prov_id END) AS organization_count FROM __prov ), individual_safety_net_counts AS ( SELECT ( SELECT COUNT(DISTINCT prov_id_s) FROM __sps_safety_net_ind_001 ) AS ind_001_count, ( SELECT COUNT(DISTINCT prov_id_s) FROM __sps_safety_net_ind_002 ) AS ind_002_count, ( SELECT COUNT(DISTINCT prov_id_s) FROM __sps_safety_net_ind_003 ) AS ind_003_count ), organization_safety_net_counts AS ( SELECT ( SELECT COUNT(DISTINCT prov_id_s) FROM __sps_safety_net_org_001 ) AS org_001_count, ( SELECT COUNT(DISTINCT prov_id_s) FROM __sps_safety_net_org_002 ) AS org_002_count, ( SELECT COUNT(DISTINCT prov_id_s) FROM __sps_safety_net_org_003 ) AS org_003_count, ( SELECT COUNT(DISTINCT prov_id_s) FROM __sps_safety_net_org_008 ) AS org_008_count, ( SELECT COUNT(DISTINCT prov_id_s) FROM __sps_safety_net_org_009 ) AS org_009_count, ( SELECT COUNT(DISTINCT prov_id_s) FROM __sps_safety_net_org_010 ) AS org_010_count, ( SELECT COUNT(DISTINCT prov_id_s) FROM __sps_safety_net_org_019 ) AS org_019_count ) SELECT 'IND_001' AS safety_net_table, ( ind_001_count / NULLIF(individual_count, 0) ) AS percentage FROM provider_counts, individual_safety_net_counts UNION ALL SELECT 'IND_002' AS safety_net_table, ( ind_002_count / NULLIF(individual_count, 0) ) AS percentage FROM provider_counts, individual_safety_net_counts UNION ALL SELECT 'IND_003' AS safety_net_table, ( ind_003_count / NULLIF(individual_count, 0) ) AS percentage FROM provider_counts, individual_safety_net_counts UNION ALL SELECT 'ORG_001' AS safety_net_table, ( org_001_count / NULLIF(organization_count, 0) ) AS percentage FROM provider_counts, organization_safety_net_counts UNION ALL SELECT 'ORG_002' AS safety_net_table, ( org_002_count / NULLIF(organization_count, 0) ) AS percentage FROM provider_counts, organization_safety_net_counts UNION ALL SELECT 'ORG_003' AS safety_net_table, ( org_003_count / NULLIF(organization_count, 0) ) AS percentage FROM provider_counts, organization_safety_net_counts UNION ALL SELECT 'ORG_008' AS safety_net_table, ( org_008_count / NULLIF(organization_count, 0) ) AS percentage FROM provider_counts, organization_safety_net_counts UNION ALL SELECT 'ORG_009' AS safety_net_table, ( org_009_count / NULLIF(organization_count, 0) ) AS percentage FROM provider_counts, organization_safety_net_counts UNION ALL SELECT 'ORG_010' AS safety_net_table, ( org_010_count / NULLIF(organization_count, 0) ) AS percentage FROM provider_counts, organization_safety_net_counts UNION ALL SELECT 'ORG_019' AS safety_net_table, ( org_019_count / NULLIF(organization_count, 0) ) AS percentage FROM provider_counts, organization_safety_net_counts -- Generated by Cortex Analyst ;"
#     print("ressss:", query)
#     return query
 
# def exec_sql_query(query):
#     query = "SELECT * FROM my_table WHERE A > 1"
#     result = pd.read_sql_query(query, engine)
#     print(result)
 
#     return result
 
# user_input="Hi"
# query = callapi(user_input)
# exec_sql_query(query)